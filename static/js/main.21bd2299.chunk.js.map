{"version":3,"sources":["Component/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","vote","title","poster_path","overview","vote_average","className","src","alt","App","useState","movies","setMovies","search_keyword","setSearch_keyword","useEffect","a","getMovies","API","fetch","then","response","json","data","results","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","length","map","movie","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6MA0BeA,EAvBD,SAAC,GAAkD,IAEpCC,EAFbC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,aAQ1C,OACA,yBAAKC,UAAU,SACX,yBAAKC,IAAMJ,EAXD,mCAW6BA,EAAe,wGAAyGK,IAAKN,IACpK,yBAAKI,UAAU,cACX,4BAAKJ,GACL,0BAAMI,UAAS,qBAXEL,EAW6BI,EAV/CJ,GAAQ,EAAU,QACbA,GAAQ,EAAU,SACd,SAQwDI,IAEpE,yBAAKC,UAAU,kBACX,yCACA,2BAAIF,MC+CDK,MA7Df,WAEE,IAFa,EAMeC,mBAAS,IANxB,mBAMNC,EANM,KAMEC,EANF,OAO+BF,mBAAS,IAPxC,mBAONG,EAPM,KAOUC,EAPV,KASbC,oBAAS,sBAAC,sBAAAC,EAAA,sDACNC,EARiB,uHAOX,2CAEP,IAEH,IAAMA,EAAY,SAACC,GACjBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAELX,EAAUW,EAAKC,aAoBrB,OACE,6BACE,gCACE,0BAAMC,SAlBW,SAACC,GACtBA,EAAMC,iBAEHd,GACDI,EAvBe,6FAuBQJ,KAenB,2BAAOP,UAAU,SACVsB,KAAK,SACLC,YAAY,mBACZC,MAAOjB,EACPkB,SAbQ,SAACL,GAEtBZ,EAAkBY,EAAMM,OAAOF,YAe7B,yBAAKxB,UAAU,aACb,yBAAKA,UAAU,mBACZK,EAAOsB,OAAS,GAAKtB,EAAOuB,KAAI,SAAAC,GAAK,OACpC,kBAAC,EAAD,eAAOC,IAAKD,EAAME,IAAQF,WC/ClBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.21bd2299.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst IMAGE_API = \"https://image.tmdb.org/t/p/w1280\";\r\nconst Movie = ({title, poster_path, overview, vote_average}) => {\r\n\r\n    const setVote_Average = (vote) => {\r\n        if(vote >= 8) return \"green\"\r\n        else if(vote >= 6) return \"orange\"\r\n        else return \"red\"\r\n    }\r\n\r\n    return (\r\n    <div className=\"movie\">\r\n        <img src={(poster_path) ? (IMAGE_API + poster_path) : 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQdabjye5wnu90Ph8mfzwhRcfvjSCukSC6GNg&usqp=CAU'} alt={title}/>\r\n        <div className=\"movie-info\">\r\n            <h2>{title}</h2>\r\n            <span className={`vote-Rage ${setVote_Average(vote_average)}`}>{vote_average}</span>\r\n        </div>\r\n        <div className=\"movie-overview\">\r\n            <h3>Overview:</h3>\r\n            <p>{overview}</p>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React, { useState, useEffect }  from 'react';\nimport Movie from './Component/Movie';\n\n\n\n\nfunction App() {\n\n  const FEATURED_API = \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=04c35731a5ee918f014970082a0088b1&page=1\";\n  \n  const SEARCH_API = \"https://api.themoviedb.org/3/search/movie?&api_key=04c35731a5ee918f014970082a0088b1&query=\";\n\n  const [movies, setMovies] = useState([]);\n  const [search_keyword, setSearch_keyword] = useState([]);\n\n  useEffect(async () => {\n      getMovies(FEATURED_API);\n  }, [])\n\n  const getMovies = (API) => {\n    fetch(API)\n      .then((response) => response.json())\n      .then((data) => {\n        // console.log(data);\n        setMovies(data.results);\n      });\n  }\n\n  // Bat su kien OnSubmit khi user tim kiem phim\n  const handleOnSubmit = (event) => {\n    event.preventDefault(); // giup User khi submit form se ko mat di keyword vua search\n\n    if(search_keyword) {\n      getMovies(SEARCH_API + search_keyword);\n      // setSearch_keyword(\"\");\n    }\n  }\n\n  // Bat su kien OnChange khi value search_keyword thay doi\n  const handleOnChange = (event) => {\n    // console.log(event.target.value);\n    setSearch_keyword(event.target.value);\n  }\n\n  return (\n    <div>\n      <header>\n        <form onSubmit={handleOnSubmit}>\n          <input className=\"search\" \n                 type=\"search\"  \n                 placeholder=\"Search movies...\"\n                 value={search_keyword}\n                 onChange={handleOnChange}/>\n        </form>\n      </header>\n\n      <div className=\"Movie-App\">\n        <div className=\"movie-container\">\n          {movies.length > 0 && movies.map(movie => (\n            <Movie key={movie.id} {...movie}/>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}